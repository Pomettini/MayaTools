global proc shelf_AIV () {
    global string $gBuffStr;
    global string $gBuffStr0;
    global string $gBuffStr1;


    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Boolean Utilities: Does a boolean intersection and preserves the two intersectated meshes" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Boolean Utilities" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/boolean_utilities.png" 
        -image1 "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/boolean_utilities.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\nfrom pymel.all import Callback\n\n\n# TEST Reset the scene to the original state\ndef BU_TestReset():\n    cmds.select(all = True)\n    cmds.delete()\n\n\n# TEST Create two objects that will work with booleans\ndef BU_TestCreate():\n    cmds.polyCube(n = 'Object001')\n    cmds.polyCube(n = 'Object002')\n    cmds.move(0, 0, 0, 'Object001')\n    cmds.move(0.5, 0.5, 0.5, 'Object002')\n\n\ndef BU_DiffIntersection():\n    selection = cmds.ls(sl=True)\n\n\n    # If you don't have exactly two meshes selected it ends the function\n    if len(selection) > 2 or len(selection) < 2:\n        print \"You have to select two elements\"\n        return\n\n\n    firstObj = selection[0]\n    secondObj = selection[1]\n\n\n    # I duplicate the objects to use it again\n    firstObjCopy = cmds.duplicate(firstObj)\n    secondObjCopy = cmds.duplicate(secondObj)\n\n\n    # First I do the difference between the first and the second object\n    cmds.polyCBoolOp(firstObj, secondObj, op=2)\n    # Then I do the intersection\n    cmds.polyCBoolOp(firstObjCopy, secondObjCopy, op=3)\n\n\ndef BU_IntersectionPreserveMeshes():\n    selection = cmds.ls(sl=True)\n\n\n    # If you don't have exactly two meshes selected it ends the function\n    if len(selection) > 2 or len(selection) < 2:\n        print \"You have to select two elements\"\n        return\n\n\n    firstObj = selection[0]\n    secondObj = selection[1]\n\n\n    # I duplicate the objects to use it again\n    firstObjCopy = cmds.duplicate(firstObj)\n    secondObjCopy = cmds.duplicate(secondObj)\n\n\n    # This will be used later as well\n    secondObjCopy2 = cmds.duplicate(secondObj)\n\n\n    # First I do the difference between the first and the second object\n    cmds.polyCBoolOp(firstObj, secondObj, op=2)\n    # Then I do the intersection\n    intersObj = cmds.polyCBoolOp(firstObjCopy, secondObjCopy, op=3)\n\n\n    # This will get preserve all the meshes used for the intersection\n    intersObjCopy = cmds.duplicate(intersObj)\n    cmds.polyCBoolOp(secondObjCopy2, intersObjCopy, op=2)\n\n\ndef BU_FunctionalTest1():\n    BU_TestReset()\n    BU_TestCreate()\n    cmds.select('Object001')\n    cmds.select('Object002', add=True)\n    BU_DiffIntersection()\n\n\ndef BU_FunctionalTest2():\n    BU_TestReset()\n    BU_TestCreate()\n    cmds.select('Object002')\n    cmds.select('Object001', add=True)\n    BU_DiffIntersection()\n\n\ndef BU_FunctionalTest3():\n    BU_TestReset()\n    BU_TestCreate()\n    cmds.select('Object001')\n    cmds.select('Object002', add=True)\n    BU_IntersectionPreserveMeshes()\n\n\ndef BU_FunctionalTest4():\n    BU_TestReset()\n    BU_TestCreate()\n    cmds.select('Object002')\n    cmds.select('Object001', add=True)\n    BU_IntersectionPreserveMeshes()\n\n\ndef BU_InitUI():\n    bu_win_name = 'diff_intersection'\n\n\n    if cmds.window(bu_win_name, q=True, ex=True):\n        cmds.deleteUI(bu_win_name)\n\n\n    cmds.window(bu_win_name, t='Boolean Utilities')\n    cmds.window(bu_win_name, e=True, height=100, width=300, sizeable=False)\n    cmds.columnLayout(adj=True)\n    cmds.button(l='Difference + Intersection', height=50, c=Callback(BU_DiffIntersection))\n    cmds.button(l='Intersection (Preserve Meshes)', height=50, c=Callback(BU_IntersectionPreserveMeshes))\n    cmds.setParent('..')\n    cmds.showWindow(bu_win_name)\n\n\nBU_InitUI()\n" 
        -sourceType "python" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Quick References Setup: Loads and positions reference images on the scene automatically" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Quick References Setup" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/quick_references_setup.png" 
        -image1 "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/quick_references_setup.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# coding=utf-8\n\n\n'''\nPuts plane references in the scene automatically\nBased on top, side and front\nTODO:\n* Make a level for each reference\n'''\n\n\nimport maya.cmds as cmds\nfrom pymel.all import Callback\nimport re\n\n\n\n# Enumerator that contains all the Plane types\nclass QSR_PlaneType(object):\n    TOP = 'top'\n    BOTTOM = 'bottom'\n    SIDE_L = 'side_l'\n    SIDE_R = 'side_r'\n    FRONT = 'front'\n    BACK = 'back'\n\n\n\n# All the stuff about the reference planes will be put here\nqsr_planes = {}\n\n\n\n# TEST Reset the scene to the original state\ndef QSR_TestResetScene():\n    cmds.select(all=True)\n    cmds.delete()\n\n\n\n# TEST Reset hypeshade to the original state\ndef QSR_TestResetHypershade():\n    materials = cmds.ls(type='shadingDependNode')\n    cmds.delete(materials)\n\n\n\n# TEST Removes all the layers\ndef QSR_TestResetLayers():\n    layers = cmds.ls(type='displayLayer')\n    cmds.delete(layers)\n\n\n\ndef QSR_LoadImagePath(planeType):\n    imgFilter = 'All Image files (*.jpg *.gif *.png);;'\n    imgPath = cmds.fileDialog2(fileFilter=imgFilter, dialogStyle=1, fileMode=1)\n\n\n    # I put the plane image on dictionary/ui only if it's valid\n    if imgPath is not None:\n        QSR_SetImagePath(planeType, imgPath[0])\n        QSR_RefreshUIImgPath(planeType, imgPath[0])\n    else:\n        cmds.confirmDialog(m='Please enter a valid image path')\n\n\n\ndef QSR_SetImagePath(planeType, imagePath):\n    global qsr_planes\n    # I put the image path on the planes dictionary\n    qsr_planes[planeType] = imagePath\n\n\n\ndef QSR_RefreshUIImgPath(planeType, imagePath):\n    cmds.textField(planeType+'_field', edit=True, tx=str(imagePath))\n\n\n\ndef QSR_EmptyImgPath(planeType):\n    global qsr_planes\n    # I remove the plane from the dictionary and empty the text field\n    del qsr_planes[planeType]\n    cmds.textField(planeType+'_field', edit=True, tx=str(''))\n\n\n\ndef QSR_RefreshAllUIImgPath():\n    for plane in qsr_planes:\n        RefreshUIImgPath(plane, qsr_planes[plane])\n\n\n\ndef QSR_RemoveAllPlaneReferences():\n    # I remove all the planes, materials and the reference layer\n    refElements = cmds.ls('ref_*')\n    cmds.delete(refElements)\n    cmds.delete('ReferenceLayer')\n\n\n\ndef QSR_CreatePlane(planeType):\n    global qsr_planes\n\n\n    planeSize = cmds.intSliderGrp('plane_size', q=True, v=True)\n    planeDistance = cmds.intSliderGrp('plane_distance', q=True, v=True)\n\n\n    halfSize = (planeSize / 2.0)\n\n\n    # If the user puts -1 as the plane distance all the planes will be on the origin\n    if planeDistance is -1:\n        planeDistance = -halfSize\n\n\n    if planeType == QSR_PlaneType.TOP:\n        # Top\n        plane = cmds.polyPlane(n='ref_top', w=planeSize, h=planeSize, sx=1, sy=1, ax=(0, 1, 0))\n        cmds.setAttr(plane[0]+'.translate', 0, -planeDistance, 0)\n\n\n    elif planeType == QSR_PlaneType.BOTTOM:\n        # Bottom\n        plane = cmds.polyPlane(n='ref_bottom', w=planeSize, h=planeSize, sx=1, sy=1, ax=(0, 1, 0))\n        cmds.setAttr(plane[0]+'.translate', 0, (planeSize + planeDistance), 0)\n        cmds.setAttr(plane[0]+'.rotate', 0, 0, 180)\n\n\n    elif planeType == QSR_PlaneType.SIDE_L:\n        # Left Side\n        plane = cmds.polyPlane(n='ref_side_l', w=planeSize, h=planeSize, sx=1, sy=1, ax=(1, 0, 0))\n        cmds.setAttr(plane[0]+'.translate', (halfSize + planeDistance), halfSize, 0)\n        cmds.setAttr(plane[0]+'.rotate', 180, 0, 180)\n\n\n    elif planeType == QSR_PlaneType.SIDE_R:\n        # Rignt Side\n        plane = cmds.polyPlane(n='ref_side_r', w=planeSize, h=planeSize, sx=1, sy=1, ax=(1, 0, 0))\n        cmds.setAttr(plane[0]+'.translate', -(halfSize + planeDistance), halfSize, 0)\n        cmds.setAttr(plane[0]+'.rotate', 0, 0, 0)\n\n\n    elif planeType == QSR_PlaneType.FRONT:\n        # Front\n        plane = cmds.polyPlane(n='ref_front', w=planeSize, h=planeSize, sx=1, sy=1, ax=(0, 0, 1))\n        cmds.setAttr(plane[0]+'.translate', 0, halfSize, -(halfSize + planeDistance))\n\n\n    elif planeType == QSR_PlaneType.BACK:\n        # Back\n        plane = cmds.polyPlane(n='ref_back', w=planeSize, h=planeSize, sx=1, sy=1, ax=(0, 0, 1))\n        cmds.setAttr(plane[0]+'.translate', 0, halfSize, (halfSize + planeDistance))\n        cmds.setAttr(plane[0]+'.rotate', 0, 180, 0)\n\n\n    return plane\n\n\n\ndef QSR_ApplyTexture(mesh, texturePath):\n    material = QSR_CreateMaterialFromPath(texturePath)\n    cmds.select(mesh[0])\n    cmds.hyperShade(assign=material)\n    cmds.rename(material, mesh[0]+'_mat')\n\n\n\ndef QSR_CreateMaterialFromPath(texturePath):\n    # Creates a new lambert\n    myMaterial = cmds.shadingNode('lambert', asShader=True)\n    # Creates a shading node for the file\n    myFile = cmds.shadingNode('file', asTexture=True)\n    # Creates a shading group\n    myShadingGroup = cmds.sets(renderable=True, noSurfaceShader=True, empty=True)\n    # Sets the texture path\n    cmds.setAttr(myFile+'.fileTextureName', texturePath, type='string')\n    # Assigns the Texture File Name to the Shading Group Shader\n    cmds.connectAttr(myMaterial+'.outColor', myShadingGroup+'.surfaceShader')\n    # Assigns the Texture Color to the Material Color\n    cmds.connectAttr(myFile+'.outColor', myMaterial+'.color')\n    # Returns the material\n    return myMaterial\n\n\n\ndef QSR_SearchReferencesInFolder():\n    global qsr_planes\n\n\n    refDir = cmds.fileDialog2(dialogStyle=1, fileMode=3)\n\n\n    # I do stuff on the directory only if it's not empty\n    if refDir is None:\n        cmds.confirmDialog(m='Please enter a valid directory path')\n        return\n\n\n    directory = refDir[0]\n    files = cmds.getFileList(folder=directory)\n\n\n    for file in files:\n        # If the path is empty I don't add the plane\n        if file is None:\n            continue\n\n\n        if re.search(r'top', file):\n            qsr_planes[QSR_PlaneType.TOP] = directory+'/'+file\n        elif re.search(r'bottom', file):\n            qsr_planes[QSR_PlaneType.BOTTOM] = directory+'/'+file\n        elif re.search(r'left', file):\n            qsr_planes[QSR_PlaneType.SIDE_L] = directory+'/'+file\n        elif re.search(r'right', file):\n            qsr_planes[QSR_PlaneType.SIDE_R] = directory+'/'+file\n        elif re.search(r'front', file):\n            qsr_planes[QSR_PlaneType.FRONT] = directory+'/'+file\n        elif re.search(r'back', file):\n            qsr_planes[QSR_PlaneType.BACK] = directory+'/'+file\n\n\n    RefreshAllUIImgPath()\n\n\n\ndef QSR_CreateReferenceLayer():\n    # I create the Ref layer once and set it as a reference layer\n    if not cmds.objExists('ReferenceLayer'):\n        cmds.createDisplayLayer(n='ReferenceLayer', empty=True)\n        cmds.setAttr('ReferenceLayer.displayType', 2)\n\n\n\ndef QSR_AddMeshToReferenceLayer(meshName):\n    cmds.editDisplayLayerMembers('ReferenceLayer', meshName)\n\n\n\ndef QSR_EnableBackfaceCulling(meshName):\n    cmds.setAttr(meshName[0]+'.backfaceCulling', 3)\n\n\n\ndef QSR_GeneratePlanes():\n    global qsr_planes\n\n\n    QSR_CreateReferenceLayer()\n\n\n    for planeType in qsr_planes:\n        plane = QSR_CreatePlane(planeType)\n        QSR_ApplyTexture(plane, qsr_planes[planeType])\n        QSR_AddMeshToReferenceLayer(plane)\n        QSR_EnableBackfaceCulling(plane)\n\n\n\ndef QSR_FunctionalTest():\n    global qsr_planes\n\n\n    QSR_TestResetHypershade()\n    QSR_TestResetScene()\n    QSR_TestResetLayers()\n\n\n    qsr_planes = {\n        'top': '/Users/Giorgio/Desktop/TestBlueprints/top.png',\n        'bottom': '/Users/Giorgio/Desktop/TestBlueprints/ref_bottom.png',\n        'side_l': '/Users/Giorgio/Desktop/TestBlueprints/left.png',\n        'side_r': '/Users/Giorgio/Desktop/TestBlueprints/caneright.png',\n        'front': '/Users/Giorgio/Desktop/TestBlueprints/front.png',\n        'back': '/Users/Giorgio/Desktop/TestBlueprints/img-back.png'\n    }\n\n\n    QSR_GeneratePlanes()\n\n\n\ndef QSR_InitUI():\n    qsr_win_name = 'quick_ref_setup'\n\n\n    if cmds.window(qsr_win_name, q=True, ex=True):\n        cmds.deleteUI(qsr_win_name)\n\n\n    cmds.window(qsr_win_name, t='Quick References Setup')\n    cmds.window(qsr_win_name, e=True, height=100, width=600, sizeable=False)\n    cmds.columnLayout(adj=True)\n\n\n    cmds.intSliderGrp('plane_size', f=True, l='Plane Size', minValue=1, maxValue=10, value=5)\n    cmds.intSliderGrp('plane_distance', f=True, l='Plane Distance', minValue=-1, maxValue=10, value=-1)\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Top', c=Callback(QSR_LoadImagePath, QSR_PlaneType.TOP))\n    cmds.textField('top_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.TOP))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Bottom', c=Callback(QSR_LoadImagePath, QSR_PlaneType.BOTTOM))\n    cmds.textField('bottom_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.BOTTOM))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Left Side', c=Callback(QSR_LoadImagePath, QSR_PlaneType.SIDE_L))\n    cmds.textField('side_l_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.SIDE_L))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Right Side', c=Callback(QSR_LoadImagePath, QSR_PlaneType.SIDE_R))\n    cmds.textField('side_r_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.SIDE_R))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Front', c=Callback(QSR_LoadImagePath, QSR_PlaneType.FRONT))\n    cmds.textField('front_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.FRONT))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(adj=True, nc=3)\n    cmds.button(label='Select Back', c=Callback(QSR_LoadImagePath, QSR_PlaneType.BACK))\n    cmds.textField('back_field', w=450)\n    cmds.button(label=' X ', c=Callback(QSR_EmptyImgPath, QSR_PlaneType.BACK))\n    cmds.setParent('..')\n\n\n    cmds.rowLayout(nc=3)\n    cmds.button(label='Remove References', h=50, w=200, c=Callback(QSR_RemoveAllPlaneReferences))\n    cmds.button(label='Load from folder', h=50, w=200, c=Callback(QSR_SearchReferencesInFolder))\n    cmds.button(label='Generate', h=50, w=200, c=Callback(QSR_GeneratePlanes))\n    cmds.setParent('..')\n    cmds.showWindow(qsr_win_name)\n\n\n\nQSR_InitUI()\n# QSR_FunctionalTest()\n" 
        -sourceType "python" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Quick Texture Material: Quickly creates a new material from an image" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Quick Texture Material" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/quick_texture_material.png" 
        -image1 "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/quick_texture_material.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n\n# TEST Reset the scene to the original state\ndef QTM_TestResetScene():\n    cmds.select(all=True)\n    cmds.delete()\n\n\n# TEST Reset hypeshade to the original state\ndef QTM_TestResetHypershade():\n    materials = cmds.ls(type='shadingDependNode')\n    cmds.delete(materials)\n\n\ndef QTM_LoadFilePrompt():\n    # Opens a prompt that ask user to select only images\n    imgFilter = 'All Image files (*.jpg *.gif *.png);;'\n    imgPath = cmds.fileDialog2(fileFilter=imgFilter, dialogStyle=1, fileMode=1)\n    # If the Texture exists it returns it\n    if imgPath is not None:\n        return imgPath\n\n\ndef QTM_NewTextureMaterial():\n    # Stores a temporary reference of the selection\n    selection = cmds.ls(sl=True)\n    # Opens the prompt\n    imgPath = QTM_LoadFilePrompt()\n    # Creates a new lambert\n    myMaterial = cmds.shadingNode('lambert', asShader=True)\n    # Creates a shading node for the file\n    myFile = cmds.shadingNode('file', asTexture=True)\n    # Creates a shading group\n    myShadingGroup = cmds.sets(renderable=True, noSurfaceShader=True, empty=True)\n    # Sets the texture path\n    cmds.setAttr(myFile+'.fileTextureName', imgPath[0], type='string')\n    # Assigns the Texture File Name to the Shading Group Shader\n    cmds.connectAttr(myMaterial+'.outColor', myShadingGroup+'.surfaceShader')\n    # Assigns the Texture Color to the Material Color\n    cmds.connectAttr(myFile+'.outColor', myMaterial+'.color')\n    # Gets the reference of the previous selection\n    cmds.select(selection)\n    # Applies the material\n    cmds.hyperShade(assign=myMaterial)\n\n\ndef QTM_FunctionalTest1():\n    # Resets everything\n    QTM_TestResetScene()\n    QTM_TestResetHypershade()\n    # Creates a plane\n    cmds.polyPlane(name='Object001', w=5, h=5, sx=True, sy=True)\n    cmds.select('Object001')\n    # Runs the script and applies the material\n    QTM_NewTextureMaterial()\n\n\n# QTM_FunctionalTest1()\nQTM_NewTextureMaterial()\n" 
        -sourceType "python" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Clear Export Routine: Merges all the meshes, sets pivot in the bottom center, freezes transforms and deletes history" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Clear Export Routine" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/clean_export_routine.png" 
        -image1 "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/clean_export_routine.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "# coding=utf-8\n\n\n'''\n    Centers the pivot in the lowest vertex\n    Puts the model in the bottom, freezes transform\n    And deletes history\n'''\n\n\nimport maya.cmds as cmds\nimport random\n\n\n# TEST Reset the scene to the original state\ndef CER_TestReset():\n    cmds.select(all=True)\n    cmds.delete()\n\n\n# TEST Create a sphere and triangulate it\ndef CER_TestCreate():\n    cmds.polySphere(name='Object001')\n    cmds.polyTriangulate('Object001', ch=True)\n\n\n# TEST Create multiple spheres, merge them, apply triangulate\ndef CER_TestCreateMultiple():\n    cmds.polySphere(name='Object001')\n    cmds.move(-0.5, -1, -0.5, 'Object001')\n    cmds.polySphere(name='Object002')\n    CER_MergeAllMeshes()\n    cmds.polyTriangulate('FinalModel', ch=True)\n\n\n#TEST Create multiple objects at random positions, merge them, apply triangulate\ndef CER_TestCreateMultipleRandom():\n    for i in range(0, 30):\n        cmds.polySphere(name='Object'+str(i))\n        cmds.move(random.randint(-4, 4), random.randint(-3, 3), random.randint(-2, 2), 'Object'+str(i))\n    CER_MergeAllMeshes()\n    cmds.polyTriangulate('FinalModel', ch=True)\n\n\ndef CER_MergeAllMeshes():\n    # Select all meshes\n    cmds.select(all=True)\n    # Put the selection to an array\n    selection = cmds.ls(sl=True)\n    # If you have at least two objects, it merges them\n    if len(selection) > 2:\n        cmds.polyUnite(*selection, name='FinalModel')\n\n\ndef CER_SetPivotToBottomCenter():\n    # Gets the selected object\n    selection = cmds.ls(sl=True)\n    # Gets the bounding box of the object\n    bbox = cmds.exactWorldBoundingBox(selection[0])\n    # Gets the middle bottom part of the bounding box\n    bottom = [(bbox[0]+bbox[3])/2, bbox[1], (bbox[2]+bbox[5])/2]\n    # Sets the pivot in that point\n    cmds.xform(selection, piv=bottom, worldSpace=True)\n    # Moves the mesh to the world origin\n    cmds.move(0, 0, 0, selection[0], rpr=True)\n\n\ndef CER_FreezeTransforms():\n    cmds.makeIdentity(apply=True, t=True, r=True, s=True, n=False, pn=True)\n\n\ndef CER_DeleteHistory():\n    selection = cmds.ls(sl=True)\n    # Delete the history of every object selected\n    for obj in selection:\n        cmds.delete(obj, ch=True)\n\n\ndef CER_FunctionalTest1():\n    CER_TestReset()\n    CER_TestCreate()\n    CER_SetPivotToBottomCenter()\n    CER_FreezeTransforms()\n    CER_DeleteHistory()\n\n\ndef CER_FunctionalTest2():\n    CER_TestReset()\n    CER_TestCreateMultiple()\n    CER_SetPivotToBottomCenter()\n    CER_FreezeTransforms()\n    CER_DeleteHistory()\n\n\ndef CER_FunctionalTest3():\n    CER_TestReset()\n    CER_TestCreateMultipleRandom()\n    CER_SetPivotToBottomCenter()\n    CER_FreezeTransforms()\n    CER_DeleteHistory()\n\n\ndef CER_CleanExportRoutine():\n    CER_MergeAllMeshes()\n    CER_SetPivotToBottomCenter()\n    CER_FreezeTransforms()\n    CER_DeleteHistory()\n\n\n# CER_TestReset()\n# CER_FunctionalTest1()\n# CER_FunctionalTest2()\n# CER_FunctionalTest3()\nCER_CleanExportRoutine()\n" 
        -sourceType "python" 
        -commandRepeatable 0
        -flat 1
    ;
    shelfButton
        -enableCommandRepeat 0
        -enable 1
        -width 35
        -height 34
        -manage 1
        -visible 1
        -preventOverride 0
        -annotation "Even Selection" 
        -enableBackground 0
        -highlightColor 0.321569 0.521569 0.65098 
        -align "center" 
        -label "Even Selection" 
        -labelOffset 0
        -rotation 0
        -flipX 0
        -flipY 0
        -useAlpha 1
        -font "plainLabelFont" 
        -overlayLabelColor 0.8 0.8 0.8 
        -overlayLabelBackColor 0 0 0 0.5 
        -image "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/even_selection.png" 
        -image1 "/Users/Giorgio/Library/Preferences/Autodesk/maya/2017/prefs/icons/even_selection.png" 
        -style "iconOnly" 
        -marginWidth 1
        -marginHeight 1
        -command "import maya.cmds as cmds\n\n\n# TEST Reset the scene to the original state\ndef ES_TestReset():\n    cmds.select(all = True)\n    cmds.delete()\n\n\n# TEST Create a sphere and select an edge loop\ndef ES_TestCreate():\n    cmds.polySphere(n = 'Object001')\n    cmds.polySelect('Object001', toggle=True, edgeLoop=180)\n\n\ndef ES_FunctionalTest():\n    ES_TestReset()\n    ES_TestCreate()\n    ES_SelectEven()\n\n\ndef ES_SelectEven():\n    selection = cmds.ls(selection=True, flatten=True)\n    # Deselect all the even items in the selection\n    for i, item in enumerate(selection):\n        if i % 2 == 0:\n            cmds.select(item, deselect=True)\n\n\n#ES_FunctionalTest()\nES_SelectEven()\n" 
        -sourceType "python" 
        -commandRepeatable 0
        -flat 1
    ;

} 
